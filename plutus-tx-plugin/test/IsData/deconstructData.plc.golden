(program
  (let
    (nonrec)
    (termbind
      (strict)
      (vardecl
        unsafeDataAsConstr
        (fun (con data) [[(con pair) (con integer)] [(con list) (con data)]])
      )
      (builtin unConstrData)
    )
    (termbind
      (strict)
      (vardecl snd (all a (type) (all b (type) (fun [[(con pair) a] b] b))))
      (builtin sndPair)
    )
    (termbind
      (strict)
      (vardecl tail (all a (type) (fun [(con list) a] [(con list) a])))
      (builtin tailList)
    )
    (datatypebind
      (datatype
        (tyvardecl Tuple2 (fun (type) (fun (type) (type))))
        (tyvardecl a (type)) (tyvardecl b (type))
        Tuple2_match
        (vardecl Tuple2 (fun a (fun b [[Tuple2 a] b])))
      )
    )
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (datatypebind
      (datatype
        (tyvardecl Maybe (fun (type) (type)))
        (tyvardecl a (type))
        Maybe_match
        (vardecl Just (fun a [Maybe a])) (vardecl Nothing [Maybe a])
      )
    )
    (termbind
      (strict)
      (vardecl head (all a (type) (fun [(con list) a] a)))
      (builtin headList)
    )
    (termbind
      (strict)
      (vardecl
        chooseList
        (all b (type) (all a (type) (fun b (fun b (fun [(con list) a] b)))))
      )
      (builtin chooseList)
    )
    (termbind
      (strict)
      (vardecl
        chooseData
        (all a (type) (fun a (fun a (fun a (fun a (fun a (fun (con data) a)))))))
      )
      (builtin chooseData)
    )
    (termbind
      (strict)
      (vardecl equalsInteger (fun (con integer) (fun (con integer) (con bool))))
      (builtin equalsInteger)
    )
    (termbind
      (strict)
      (vardecl fst (all a (type) (all b (type) (fun [[(con pair) a] b] a))))
      (builtin fstPair)
    )
    (termbind
      (strict)
      (vardecl ifThenElse (all a (type) (fun (con bool) (fun a (fun a a)))))
      (builtin ifThenElse)
    )
    (termbind
      (strict)
      (vardecl
        fFromDataTuple2_cfromBuiltinData
        (all a (type) (all b (type) (fun [(lam a (type) (fun (con data) [Maybe a])) a] (fun [(lam a (type) (fun (con data) [Maybe a])) b] (fun (con data) [Maybe [[Tuple2 a] b]])))))
      )
      (abs
        a
        (type)
        (abs
          b
          (type)
          (lam
            dFromData
            [(lam a (type) (fun (con data) [Maybe a])) a]
            (lam
              dFromData
              [(lam a (type) (fun (con data) [Maybe a])) b]
              (lam
                d
                (con data)
                [
                  [
                    [
                      [
                        [
                          [
                            [
                              { chooseData (fun Unit [Maybe [[Tuple2 a] b]]) }
                              (lam
                                ds
                                Unit
                                (let
                                  (nonrec)
                                  (termbind
                                    (nonstrict)
                                    (vardecl
                                      tup
                                      [[(con pair) (con integer)] [(con list) (con data)]]
                                    )
                                    [ unsafeDataAsConstr d ]
                                  )
                                  (termbind
                                    (nonstrict)
                                    (vardecl l [(con list) (con data)])
                                    [
                                      {
                                        { snd (con integer) }
                                        [(con list) (con data)]
                                      }
                                      tup
                                    ]
                                  )
                                  (termbind
                                    (nonstrict)
                                    (vardecl l [(con list) (con data)])
                                    [ { tail (con data) } l ]
                                  )
                                  (termbind
                                    (nonstrict)
                                    (vardecl nilCase [Maybe [[Tuple2 a] b]])
                                    [
                                      [
                                        [
                                          {
                                            [
                                              { Maybe_match a }
                                              [
                                                dFromData
                                                [ { head (con data) } l ]
                                              ]
                                            ]
                                            (fun Unit [Maybe [[Tuple2 a] b]])
                                          }
                                          (lam
                                            ipv
                                            a
                                            (lam
                                              thunk
                                              Unit
                                              [
                                                [
                                                  [
                                                    {
                                                      [
                                                        { Maybe_match b }
                                                        [
                                                          dFromData
                                                          [
                                                            { head (con data) }
                                                            l
                                                          ]
                                                        ]
                                                      ]
                                                      (fun Unit [Maybe [[Tuple2 a] b]])
                                                    }
                                                    (lam
                                                      ipv
                                                      b
                                                      (lam
                                                        thunk
                                                        Unit
                                                        [
                                                          {
                                                            Just [[Tuple2 a] b]
                                                          }
                                                          [
                                                            [
                                                              { { Tuple2 a } b }
                                                              ipv
                                                            ]
                                                            ipv
                                                          ]
                                                        ]
                                                      )
                                                    )
                                                  ]
                                                  (lam
                                                    thunk
                                                    Unit
                                                    { Nothing [[Tuple2 a] b] }
                                                  )
                                                ]
                                                Unit
                                              ]
                                            )
                                          )
                                        ]
                                        (lam
                                          thunk Unit { Nothing [[Tuple2 a] b] }
                                        )
                                      ]
                                      Unit
                                    ]
                                  )
                                  (termbind
                                    (nonstrict)
                                    (vardecl lvl [Maybe [[Tuple2 a] b]])
                                    [
                                      [
                                        [
                                          [
                                            {
                                              {
                                                chooseList
                                                (fun Unit [Maybe [[Tuple2 a] b]])
                                              }
                                              (con data)
                                            }
                                            (lam ds Unit nilCase)
                                          ]
                                          (lam
                                            ds Unit { Nothing [[Tuple2 a] b] }
                                          )
                                        ]
                                        [ { tail (con data) } l ]
                                      ]
                                      Unit
                                    ]
                                  )
                                  (termbind
                                    (nonstrict)
                                    (vardecl lvl [Maybe [[Tuple2 a] b]])
                                    [
                                      [
                                        [
                                          [
                                            {
                                              {
                                                chooseList
                                                (fun Unit [Maybe [[Tuple2 a] b]])
                                              }
                                              (con data)
                                            }
                                            (lam
                                              ds Unit { Nothing [[Tuple2 a] b] }
                                            )
                                          ]
                                          (lam ds Unit lvl)
                                        ]
                                        l
                                      ]
                                      Unit
                                    ]
                                  )
                                  (termbind
                                    (nonstrict)
                                    (vardecl x [Maybe [[Tuple2 a] b]])
                                    [
                                      [
                                        [
                                          [
                                            {
                                              {
                                                chooseList
                                                (fun Unit [Maybe [[Tuple2 a] b]])
                                              }
                                              (con data)
                                            }
                                            (lam
                                              ds Unit { Nothing [[Tuple2 a] b] }
                                            )
                                          ]
                                          (lam ds Unit lvl)
                                        ]
                                        l
                                      ]
                                      Unit
                                    ]
                                  )
                                  [
                                    [
                                      [
                                        [
                                          {
                                            ifThenElse
                                            (fun Unit [Maybe [[Tuple2 a] b]])
                                          }
                                          [
                                            [
                                              equalsInteger
                                              [
                                                {
                                                  { fst (con integer) }
                                                  [(con list) (con data)]
                                                }
                                                tup
                                              ]
                                            ]
                                            (con integer 0)
                                          ]
                                        ]
                                        (lam ds Unit x)
                                      ]
                                      (lam ds Unit { Nothing [[Tuple2 a] b] })
                                    ]
                                    Unit
                                  ]
                                )
                              )
                            ]
                            (lam ds Unit { Nothing [[Tuple2 a] b] })
                          ]
                          (lam ds Unit { Nothing [[Tuple2 a] b] })
                        ]
                        (lam ds Unit { Nothing [[Tuple2 a] b] })
                      ]
                      (lam ds Unit { Nothing [[Tuple2 a] b] })
                    ]
                    d
                  ]
                  Unit
                ]
              )
            )
          )
        )
      )
    )
    (termbind
      (nonstrict)
      (vardecl
        fFromDataTuple2
        (all a (type) (all b (type) (fun [(lam a (type) (fun (con data) [Maybe a])) a] (fun [(lam a (type) (fun (con data) [Maybe a])) b] [(lam a (type) (fun (con data) [Maybe a])) [[Tuple2 a] b]]))))
      )
      fFromDataTuple2_cfromBuiltinData
    )
    (termbind
      (strict)
      (vardecl unsafeDataAsI (fun (con data) (con integer)))
      (builtin unIData)
    )
    (termbind
      (strict)
      (vardecl
        fFromDataInteger_cfromBuiltinData (fun (con data) [Maybe (con integer)])
      )
      (lam
        d
        (con data)
        [
          [
            [
              [
                [
                  [
                    [
                      { chooseData (fun Unit [Maybe (con integer)]) }
                      (lam ds Unit { Nothing (con integer) })
                    ]
                    (lam ds Unit { Nothing (con integer) })
                  ]
                  (lam ds Unit { Nothing (con integer) })
                ]
                (lam ds Unit [ { Just (con integer) } [ unsafeDataAsI d ] ])
              ]
              (lam ds Unit { Nothing (con integer) })
            ]
            d
          ]
          Unit
        ]
      )
    )
    (termbind
      (nonstrict)
      (vardecl
        fFromDataInteger
        [(lam a (type) (fun (con data) [Maybe a])) (con integer)]
      )
      fFromDataInteger_cfromBuiltinData
    )
    (termbind
      (nonstrict)
      (vardecl
        dFromData
        [(lam a (type) (fun (con data) [Maybe a])) [[Tuple2 (con integer)] (con integer)]]
      )
      [
        [ { { fFromDataTuple2 (con integer) } (con integer) } fFromDataInteger ]
        fFromDataInteger
      ]
    )
    (termbind
      (strict)
      (vardecl
        fromBuiltinData
        (all a (type) (fun [(lam a (type) (fun (con data) [Maybe a])) a] (fun (con data) [Maybe a])))
      )
      (abs a (type) (lam v [(lam a (type) (fun (con data) [Maybe a])) a] v))
    )
    (lam
      ds
      (con data)
      [
        [ { fromBuiltinData [[Tuple2 (con integer)] (con integer)] } dFromData ]
        ds
      ]
    )
  )
)